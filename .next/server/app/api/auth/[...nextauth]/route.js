"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/[...nextauth]/route";
exports.ids = ["app/api/auth/[...nextauth]/route"];
exports.modules = {

/***/ "mysql2/promise":
/*!*********************************!*\
  !*** external "mysql2/promise" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("mysql2/promise");

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_eraste_Products_e_one_elastic_doctor_frontend_app_api_auth_nextauth_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/[...nextauth]/route.ts */ \"(rsc)/./app/api/auth/[...nextauth]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/[...nextauth]/route\",\n        pathname: \"/api/auth/[...nextauth]\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/[...nextauth]/route\"\n    },\n    resolvedPagePath: \"C:\\\\eraste\\\\Products\\\\e-one-elastic-doctor\\\\frontend\\\\app\\\\api\\\\auth\\\\[...nextauth]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_eraste_Products_e_one_elastic_doctor_frontend_app_api_auth_nextauth_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/[...nextauth]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGJTVCLi4ubmV4dGF1dGglNUQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkYlNUIuLi5uZXh0YXV0aCU1RCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkYlNUIuLi5uZXh0YXV0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDZXJhc3RlJTVDUHJvZHVjdHMlNUNlLW9uZS1lbGFzdGljLWRvY3RvciU1Q2Zyb250ZW5kJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDZXJhc3RlJTVDUHJvZHVjdHMlNUNlLW9uZS1lbGFzdGljLWRvY3RvciU1Q2Zyb250ZW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM2QztBQUMxSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2VsYXN0aWNkb2N0b3Itc2Fhcy8/NTNmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxlcmFzdGVcXFxcUHJvZHVjdHNcXFxcZS1vbmUtZWxhc3RpYy1kb2N0b3JcXFxcZnJvbnRlbmRcXFxcYXBwXFxcXGFwaVxcXFxhdXRoXFxcXFsuLi5uZXh0YXV0aF1cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2F1dGgvWy4uLm5leHRhdXRoXVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcZXJhc3RlXFxcXFByb2R1Y3RzXFxcXGUtb25lLWVsYXN0aWMtZG9jdG9yXFxcXGZyb250ZW5kXFxcXGFwcFxcXFxhcGlcXFxcYXV0aFxcXFxbLi4ubmV4dGF1dGhdXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/auth/[...nextauth]/route.ts":
/*!*********************************************!*\
  !*** ./app/api/auth/[...nextauth]/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler),\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/./node_modules/next-auth/providers/google.js\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mysql2/promise */ \"mysql2/promise\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mysql2_promise__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Enhanced database connection with better error handling\nconst createConnection = async ()=>{\n    const connectionConfig = {\n        host: process.env.DB_HOST || \"localhost\",\n        user: process.env.DB_USER || \"elasticdoctor\",\n        password: process.env.DB_PASSWORD || \"elastic-1905Bis-doctor9420\",\n        database: process.env.DB_NAME || \"elasticdoctor\",\n        port: parseInt(process.env.DB_PORT || \"3306\"),\n        connectTimeout: 15000,\n        acquireTimeout: 15000,\n        timeout: 15000,\n        reconnect: true,\n        idleTimeout: 300000\n    };\n    try {\n        console.log(\"NextAuth: Attempting to connect to database at:\", connectionConfig.host + \":\" + connectionConfig.port);\n        const connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_2___default().createConnection(connectionConfig);\n        console.log(\"NextAuth: Database connection successful\");\n        return connection;\n    } catch (error) {\n        console.error(\"NextAuth: Database connection failed:\", error);\n        // Don't throw error for OAuth to continue working\n        return null;\n    }\n};\n// Custom database operations\nconst dbOperations = {\n    async findUserByGoogleId (googleId) {\n        try {\n            const connection = await createConnection();\n            if (!connection) return null;\n            const [rows] = await connection.execute(\"SELECT * FROM users WHERE google_id = ?\", [\n                googleId\n            ]);\n            await connection.end();\n            return Array.isArray(rows) && rows.length > 0 ? rows[0] : null;\n        } catch (error) {\n            console.error(\"NextAuth: Error finding user by Google ID:\", error);\n            return null;\n        }\n    },\n    async findUserByEmail (email) {\n        try {\n            const connection = await createConnection();\n            if (!connection) return null;\n            const [rows] = await connection.execute(\"SELECT * FROM users WHERE email = ?\", [\n                email\n            ]);\n            await connection.end();\n            return Array.isArray(rows) && rows.length > 0 ? rows[0] : null;\n        } catch (error) {\n            console.error(\"NextAuth: Error finding user by email:\", error);\n            return null;\n        }\n    },\n    async createGoogleUser (userData) {\n        try {\n            const connection = await createConnection();\n            if (!connection) return null;\n            const [result] = await connection.execute(`INSERT INTO users (\n          google_id, email, name, given_name, family_name, \n          profile_picture_url, email_verified, pricing_tier\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, [\n                userData.google_id,\n                userData.email,\n                userData.name,\n                userData.given_name,\n                userData.family_name,\n                userData.profile_picture_url,\n                true,\n                userData.pricing_tier || \"developer\" // Default tier\n            ]);\n            // Get the created user\n            const [rows] = await connection.execute(\"SELECT * FROM users WHERE id = ?\", [\n                result.insertId\n            ]);\n            await connection.end();\n            return Array.isArray(rows) && rows.length > 0 ? rows[0] : null;\n        } catch (error) {\n            console.error(\"NextAuth: Error creating user:\", error);\n            return null;\n        }\n    },\n    async updateUserLastLogin (userId) {\n        try {\n            const connection = await createConnection();\n            if (!connection) return;\n            await connection.execute(\"UPDATE users SET last_login = NOW() WHERE id = ?\", [\n                userId\n            ]);\n            await connection.end();\n        } catch (error) {\n            console.error(\"NextAuth: Error updating last login:\", error);\n        }\n    },\n    async linkGoogleAccount (userId, googleId, profilePicture) {\n        try {\n            const connection = await createConnection();\n            if (!connection) return null;\n            await connection.execute(\"UPDATE users SET google_id = ?, profile_picture_url = ? WHERE id = ?\", [\n                googleId,\n                profilePicture,\n                userId\n            ]);\n            // Return updated user\n            const [rows] = await connection.execute(\"SELECT * FROM users WHERE id = ?\", [\n                userId\n            ]);\n            await connection.end();\n            return Array.isArray(rows) && rows.length > 0 ? rows[0] : null;\n        } catch (error) {\n            console.error(\"NextAuth: Error linking Google account:\", error);\n            return null;\n        }\n    }\n};\nconst authOptions = {\n    providers: [\n        (0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n            // Simplified configuration to avoid timeout issues\n            authorization: {\n                params: {\n                    prompt: \"select_account\",\n                    access_type: \"offline\",\n                    response_type: \"code\",\n                    scope: \"openid email profile\"\n                }\n            }\n        })\n    ],\n    callbacks: {\n        async redirect ({ url, baseUrl }) {\n            console.log(\"NextAuth redirect callback - url:\", url, \"baseUrl:\", baseUrl);\n            // Handle account deactivated case\n            if (url.includes(\"account_deactivated\") || url.includes(\"AccountInactive\")) {\n                console.log(\"Account deactivated redirect detected\");\n                return `${baseUrl}/auth/account-deactivated`;\n            }\n            // Handle sign out redirects\n            if (url.includes(\"signout\") || url.includes(\"/api/auth/signout\")) {\n                console.log(\"Sign out redirect detected, going to home page\");\n                return baseUrl;\n            }\n            // For OAuth callbacks, prioritize the specified callback URL\n            if (url.includes(\"/api/auth/callback/google\")) {\n                console.log(\"Google OAuth callback detected, full URL:\", url);\n                // Check if this is an error case (like registration attempt with existing user)\n                if (url.includes(\"error=\")) {\n                    const errorMatch = url.match(/error=([^&]+)/);\n                    if (errorMatch) {\n                        const errorType = decodeURIComponent(errorMatch[1]);\n                        console.log(\"OAuth error detected:\", errorType);\n                        // For registration errors, redirect to register page with error info\n                        if (url.includes(\"autoRegister=\") || url.includes(\"source=pricing\")) {\n                            console.log(\"Registration flow error, redirecting to register page\");\n                            const planMatch = url.match(/[?&](?:autoRegister|tier)=([^&]+)/);\n                            const plan = planMatch ? decodeURIComponent(planMatch[1]) : \"developer\";\n                            return `${baseUrl}/register?plan=${plan}&error=${errorType}`;\n                        }\n                    }\n                }\n                // Try multiple ways to extract the callback URL\n                const callbackPatterns = [\n                    /[?&]callbackUrl=([^&]+)/,\n                    /callbackUrl=([^&]+)/,\n                    /redirect_uri=([^&]+)/\n                ];\n                for (const pattern of callbackPatterns){\n                    const match = url.match(pattern);\n                    if (match) {\n                        const callbackUrl = decodeURIComponent(match[1]);\n                        console.log(\"Found callback URL with pattern:\", pattern.source, \"-> \", callbackUrl);\n                        if (callbackUrl.startsWith(baseUrl) || callbackUrl.startsWith(\"/\")) {\n                            const fullCallbackUrl = callbackUrl.startsWith(\"/\") ? `${baseUrl}${callbackUrl}` : callbackUrl;\n                            console.log(\"Valid callback URL, redirecting to:\", fullCallbackUrl);\n                            return fullCallbackUrl;\n                        }\n                    }\n                }\n                console.log(\"No valid callback URL found, redirecting to login\");\n                return `${baseUrl}/login`;\n            }\n            // Handle direct URLs\n            if (url.startsWith(baseUrl)) {\n                console.log(\"Valid direct URL:\", url);\n                return url;\n            }\n            // Default to login page\n            console.log(\"Default redirect to login page\");\n            return `${baseUrl}/login`;\n        },\n        async signIn ({ user, account, profile }) {\n            console.log(\"SignIn callback - Account provider:\", account?.provider);\n            console.log(\"SignIn callback - User email:\", user?.email);\n            if (account?.provider === \"google\") {\n                // Check if account is active before allowing sign-in\n                try {\n                    const googleId = account.providerAccountId;\n                    const email = user.email;\n                    // Check if user exists and is active\n                    let dbUser = await dbOperations.findUserByGoogleId(googleId);\n                    if (!dbUser) {\n                        // Check by email if not found by Google ID\n                        dbUser = await dbOperations.findUserByEmail(email);\n                    }\n                    if (dbUser && !dbUser.is_active) {\n                        console.log(\"❌ SignIn callback: Account is inactive, blocking sign-in\");\n                        // Return false to block sign-in and trigger error\n                        return false;\n                    }\n                    console.log(\"✓ Google sign-in allowed - account is active or new user\");\n                    return true;\n                } catch (error) {\n                    console.error(\"SignIn callback error:\", error);\n                    // Allow sign-in on database errors to avoid blocking legitimate users\n                    return true;\n                }\n            }\n            console.log(\"❌ Non-Google provider rejected:\", account?.provider);\n            return false;\n        },\n        async jwt ({ token, account, user, trigger }) {\n            try {\n                // Handle session refresh triggers (like after tier upgrades)\n                if (trigger === \"update\" && token.userId) {\n                    console.log(\"JWT callback - trigger update detected, refreshing user data for ID:\", token.userId);\n                    try {\n                        // Get user by ID since we have the userId in token\n                        const connection = await createConnection();\n                        if (connection) {\n                            const [rows] = await connection.execute(\"SELECT * FROM users WHERE id = ?\", [\n                                token.userId\n                            ]);\n                            await connection.end();\n                            if (Array.isArray(rows) && rows.length > 0) {\n                                const dbUser = rows[0];\n                                console.log(\"JWT refresh - Updated tier from DB:\", dbUser.pricing_tier);\n                                token.pricingTier = dbUser.pricing_tier;\n                                token.emailVerified = dbUser.email_verified;\n                                console.log(\"JWT refresh - Token updated with new tier:\", token.pricingTier);\n                            }\n                        }\n                    } catch (refreshError) {\n                        console.log(\"JWT refresh error:\", refreshError);\n                    }\n                    return token;\n                }\n                if (account && user) {\n                    console.log(\"JWT callback - processing new sign-in for:\", user.email);\n                    console.log(\"Account details:\", {\n                        provider: account.provider,\n                        type: account.type\n                    });\n                    // First time user signs in\n                    const googleId = account.providerAccountId;\n                    const email = user.email;\n                    // Check if user exists by Google ID\n                    let dbUser = await dbOperations.findUserByGoogleId(googleId);\n                    if (dbUser) {\n                        console.log(\"User found in database with tier:\", dbUser.pricing_tier);\n                        // Check if account is active\n                        if (!dbUser.is_active) {\n                            console.log(\"❌ Account is inactive, rejecting sign-in for:\", user.email);\n                            // Set a flag to indicate account is inactive\n                            token.accountInactive = true;\n                            token.error = \"AccountInactive\";\n                            return token;\n                        }\n                        // User exists and is active, update last login and go straight to dashboard\n                        await dbOperations.updateUserLastLogin(dbUser.id);\n                        token.userId = dbUser.id;\n                        token.pricingTier = dbUser.pricing_tier // **FIX 2: Always use DB tier as source of truth**\n                        ;\n                        token.emailVerified = dbUser.email_verified;\n                        token.needsRegistration = false;\n                        console.log(\"Setting token with correct tier from DB:\", dbUser.pricing_tier);\n                        // Ensure we have the latest profile image\n                        if (user.image && user.image !== dbUser.profile_picture_url) {\n                            // Update profile picture in database if it's changed\n                            try {\n                                const connection = await createConnection();\n                                if (connection) {\n                                    await connection.execute(\"UPDATE users SET profile_picture_url = ? WHERE id = ?\", [\n                                        user.image,\n                                        dbUser.id\n                                    ]);\n                                    await connection.end();\n                                }\n                            } catch (error) {\n                                console.error(\"Error updating profile picture:\", error);\n                            }\n                        }\n                    } else {\n                        console.log(\"User not found in database, checking flow type...\");\n                        // Check if user exists by email (might have registered before but never linked Google)\n                        const existingUser = await dbOperations.findUserByEmail(email);\n                        if (existingUser) {\n                            console.log(\"User found by email, checking if account is active...\");\n                            // Check if account is active\n                            if (!existingUser.is_active) {\n                                console.log(\"❌ Account is inactive, rejecting sign-in for:\", user.email);\n                                token.accountInactive = true;\n                                token.error = \"AccountInactive\";\n                                return token;\n                            }\n                            console.log(\"User found by email, linking Google account with tier:\", existingUser.pricing_tier);\n                            // Link Google account to existing user\n                            dbUser = await dbOperations.linkGoogleAccount(existingUser.id, googleId, user.image || \"\");\n                            if (dbUser) {\n                                await dbOperations.updateUserLastLogin(dbUser.id);\n                                token.userId = dbUser.id;\n                                token.pricingTier = dbUser.pricing_tier // **FIX 2: Use correct tier from linked account**\n                                ;\n                                token.emailVerified = dbUser.email_verified;\n                                token.needsRegistration = false;\n                                console.log(\"Linked account with tier:\", dbUser.pricing_tier);\n                            }\n                        } else {\n                            // User doesn't exist - check if this is Flow 2 and auto-create immediately\n                            console.log(\"New user detected, checking for auto-registration...\");\n                            // Check if there's pending registration data (Flow 2)\n                            // We'll detect this by checking if we're in a browser context and have sessionStorage\n                            if (false) {} else {\n                                // Server-side or no sessionStorage - mark as needing registration\n                                token.needsRegistration = true;\n                                token.googleId = googleId;\n                                token.userEmail = user.email;\n                                token.userName = user.name;\n                                token.userImage = user.image;\n                            }\n                        }\n                    }\n                } else if (token.needsRegistration && token.userEmail) {\n                    // For existing tokens, periodically check if registration was completed\n                    console.log(\"JWT callback - checking if registration completed for:\", token.userEmail);\n                    try {\n                        const dbUser = await dbOperations.findUserByEmail(token.userEmail);\n                        if (dbUser) {\n                            console.log(\"Registration completed! Updating token with tier:\", dbUser.pricing_tier);\n                            // User has completed registration, update token\n                            token.userId = dbUser.id;\n                            token.pricingTier = dbUser.pricing_tier // **FIX 2: Always sync tier from database**\n                            ;\n                            token.emailVerified = dbUser.email_verified;\n                            token.needsRegistration = false;\n                            // Clear temporary registration data\n                            delete token.googleId;\n                            delete token.userEmail;\n                            delete token.userName;\n                            delete token.userImage;\n                            console.log(\"Token updated with correct tier:\", dbUser.pricing_tier);\n                        }\n                    } catch (checkError) {\n                        console.log(\"Error checking registration status:\", checkError);\n                    // Don't update token if check fails\n                    }\n                }\n                return token;\n            } catch (error) {\n                console.error(\"JWT callback error:\", error);\n                // For new users or database connection errors, mark them as needing registration\n                if (account && user) {\n                    console.log(\"Database error, marking user as needing registration\");\n                    token.needsRegistration = true;\n                    token.googleId = account.providerAccountId;\n                    token.userEmail = user.email;\n                    token.userName = user.name;\n                    token.userImage = user.image;\n                }\n                return token;\n            }\n        },\n        async session ({ session, token }) {\n            // Check if account is inactive\n            if (token.accountInactive || token.error === \"AccountInactive\") {\n                // Return null session to force sign out and redirect\n                console.log(\"Session callback: Account inactive, redirecting to deactivated page\");\n                // We'll handle the redirect in the frontend when session becomes null\n                return null;\n            }\n            // Only send full session data if user is completely registered\n            if (token.userId && !token.needsRegistration) {\n                // User has completed registration\n                session.user.id = token.userId;\n                session.user.pricingTier = token.pricingTier;\n                session.user.emailVerified = token.emailVerified;\n                session.user.needsRegistration = false;\n                // Include new user flag for welcome flows\n                if (token.isNewUser) {\n                    session.user.isNewUser = true;\n                    // Clear the flag after first session to avoid showing welcome repeatedly\n                    delete token.isNewUser;\n                }\n            } else if (token.needsRegistration) {\n                // User needs registration - provide minimal session data\n                session.user.needsRegistration = true;\n                session.user.googleId = token.googleId;\n                session.user.email = token.userEmail;\n                session.user.name = token.userName;\n                session.user.image = token.userImage;\n                // Don't provide user.id - this prevents dashboard access\n                delete session.user.id;\n            }\n            return session;\n        },\n        async signOut ({ token, session }) {\n            console.log(\"NextAuth signOut callback - clearing session data\");\n            // Ensure all user data is cleared from the token\n            return true;\n        }\n    },\n    pages: {\n        signIn: \"/login\",\n        signOut: \"/\",\n        error: \"/auth/error\"\n    },\n    session: {\n        strategy: \"jwt\",\n        maxAge: 30 * 24 * 60 * 60,\n        updateAge: 24 * 60 * 60\n    },\n    cookies: {\n        sessionToken: {\n            name:  false ? 0 : \"next-auth.session-token\",\n            options: {\n                httpOnly: true,\n                sameSite: \"lax\",\n                path: \"/\",\n                secure: \"development\" === \"production\"\n            }\n        }\n    }\n};\nconst handler = next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions);\n// Export authOptions for use in other API routes\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFnQztBQUN1QjtBQUNyQjtBQUdsQywwREFBMEQ7QUFDMUQsTUFBTUcsbUJBQW1CO0lBQ3ZCLE1BQU1DLG1CQUFtQjtRQUN2QkMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxPQUFPLElBQUk7UUFDN0JDLE1BQU1ILFFBQVFDLEdBQUcsQ0FBQ0csT0FBTyxJQUFJO1FBQzdCQyxVQUFVTCxRQUFRQyxHQUFHLENBQUNLLFdBQVcsSUFBSTtRQUNyQ0MsVUFBVVAsUUFBUUMsR0FBRyxDQUFDTyxPQUFPLElBQUk7UUFDakNDLE1BQU1DLFNBQVNWLFFBQVFDLEdBQUcsQ0FBQ1UsT0FBTyxJQUFJO1FBQ3RDQyxnQkFBZ0I7UUFDaEJDLGdCQUFnQjtRQUNoQkMsU0FBUztRQUNUQyxXQUFXO1FBQ1hDLGFBQWE7SUFDZjtJQUVBLElBQUk7UUFDRkMsUUFBUUMsR0FBRyxDQUFDLG1EQUFtRHBCLGlCQUFpQkMsSUFBSSxHQUFHLE1BQU1ELGlCQUFpQlcsSUFBSTtRQUNsSCxNQUFNVSxhQUFhLE1BQU12QixzRUFBc0IsQ0FBQ0U7UUFDaERtQixRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPQztJQUNULEVBQUUsT0FBT0MsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMseUNBQXlDQTtRQUN2RCxrREFBa0Q7UUFDbEQsT0FBTztJQUNUO0FBQ0Y7QUFFQSw2QkFBNkI7QUFDN0IsTUFBTUMsZUFBZTtJQUNuQixNQUFNQyxvQkFBbUJDLFFBQWdCO1FBQ3ZDLElBQUk7WUFDRixNQUFNSixhQUFhLE1BQU10QjtZQUN6QixJQUFJLENBQUNzQixZQUFZLE9BQU87WUFFeEIsTUFBTSxDQUFDSyxLQUFLLEdBQUcsTUFBTUwsV0FBV00sT0FBTyxDQUNyQywyQ0FDQTtnQkFBQ0Y7YUFBUztZQUVaLE1BQU1KLFdBQVdPLEdBQUc7WUFDcEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFD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QyxPQUFPLEVBQUU7WUFDOUJsRyxRQUFRQyxHQUFHLENBQUM7WUFDWixpREFBaUQ7WUFDakQsT0FBTztRQUNUO0lBQ0Y7SUFDQW1HLE9BQU87UUFDTDFDLFFBQVE7UUFDUnlDLFNBQVM7UUFDVGhHLE9BQU87SUFDVDtJQUNBK0YsU0FBUztRQUNQRyxVQUFVO1FBQ1ZDLFFBQVEsS0FBSyxLQUFLLEtBQUs7UUFDdkJDLFdBQVcsS0FBSyxLQUFLO0lBQ3ZCO0lBQ0FDLFNBQVM7UUFDUEMsY0FBYztZQUNadEYsTUFBTXBDLE1BQXlCLEdBQWUsSUFBcUM7WUFDbkYySCxTQUFTO2dCQUNQQyxVQUFVO2dCQUNWQyxVQUFVO2dCQUNWQyxNQUFNO2dCQUNOQyxRQUFRL0gsa0JBQXlCO1lBQ25DO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsTUFBTWdJLFVBQVV0SSxnREFBUUEsQ0FBQ29EO0FBRXpCLGlEQUFpRDtBQUNNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWxhc3RpY2RvY3Rvci1zYWFzLy4vYXBwL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGUudHM/YzhhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmV4dEF1dGggZnJvbSAnbmV4dC1hdXRoJ1xuaW1wb3J0IEdvb2dsZVByb3ZpZGVyIGZyb20gJ25leHQtYXV0aC9wcm92aWRlcnMvZ29vZ2xlJ1xuaW1wb3J0IG15c3FsIGZyb20gJ215c3FsMi9wcm9taXNlJ1xuaW1wb3J0IHsgTmV4dEF1dGhPcHRpb25zIH0gZnJvbSAnbmV4dC1hdXRoJ1xuXG4vLyBFbmhhbmNlZCBkYXRhYmFzZSBjb25uZWN0aW9uIHdpdGggYmV0dGVyIGVycm9yIGhhbmRsaW5nXG5jb25zdCBjcmVhdGVDb25uZWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjb25uZWN0aW9uQ29uZmlnID0ge1xuICAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXG4gICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAnZWxhc3RpY2RvY3RvcicsXG4gICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LkRCX1BBU1NXT1JEIHx8ICdlbGFzdGljLTE5MDVCaXMtZG9jdG9yOTQyMCcsXG4gICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LkRCX05BTUUgfHwgJ2VsYXN0aWNkb2N0b3InLFxuICAgIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgJzMzMDYnKSxcbiAgICBjb25uZWN0VGltZW91dDogMTUwMDAsIC8vIDE1IHNlY29uZHNcbiAgICBhY3F1aXJlVGltZW91dDogMTUwMDAsIC8vIDE1IHNlY29uZHNcbiAgICB0aW1lb3V0OiAxNTAwMCwgLy8gMTUgc2Vjb25kc1xuICAgIHJlY29ubmVjdDogdHJ1ZSxcbiAgICBpZGxlVGltZW91dDogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcbiAgfVxuICBcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnTmV4dEF1dGg6IEF0dGVtcHRpbmcgdG8gY29ubmVjdCB0byBkYXRhYmFzZSBhdDonLCBjb25uZWN0aW9uQ29uZmlnLmhvc3QgKyAnOicgKyBjb25uZWN0aW9uQ29uZmlnLnBvcnQpXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oY29ubmVjdGlvbkNvbmZpZylcbiAgICBjb25zb2xlLmxvZygnTmV4dEF1dGg6IERhdGFiYXNlIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCcpXG4gICAgcmV0dXJuIGNvbm5lY3Rpb25cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdOZXh0QXV0aDogRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IpXG4gICAgLy8gRG9uJ3QgdGhyb3cgZXJyb3IgZm9yIE9BdXRoIHRvIGNvbnRpbnVlIHdvcmtpbmdcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8vIEN1c3RvbSBkYXRhYmFzZSBvcGVyYXRpb25zXG5jb25zdCBkYk9wZXJhdGlvbnMgPSB7XG4gIGFzeW5jIGZpbmRVc2VyQnlHb29nbGVJZChnb29nbGVJZDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCBjcmVhdGVDb25uZWN0aW9uKClcbiAgICAgIGlmICghY29ubmVjdGlvbikgcmV0dXJuIG51bGxcbiAgICAgIFxuICAgICAgY29uc3QgW3Jvd3NdID0gYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlKFxuICAgICAgICAnU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBnb29nbGVfaWQgPSA/JyxcbiAgICAgICAgW2dvb2dsZUlkXVxuICAgICAgKVxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5lbmQoKVxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocm93cykgJiYgcm93cy5sZW5ndGggPiAwID8gcm93c1swXSA6IG51bGxcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTmV4dEF1dGg6IEVycm9yIGZpbmRpbmcgdXNlciBieSBHb29nbGUgSUQ6JywgZXJyb3IpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfSxcblxuICBhc3luYyBmaW5kVXNlckJ5RW1haWwoZW1haWw6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgY3JlYXRlQ29ubmVjdGlvbigpXG4gICAgICBpZiAoIWNvbm5lY3Rpb24pIHJldHVybiBudWxsXG4gICAgICBcbiAgICAgIGNvbnN0IFtyb3dzXSA9IGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZShcbiAgICAgICAgJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgZW1haWwgPSA/JyxcbiAgICAgICAgW2VtYWlsXVxuICAgICAgKVxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5lbmQoKVxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocm93cykgJiYgcm93cy5sZW5ndGggPiAwID8gcm93c1swXSA6IG51bGxcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTmV4dEF1dGg6IEVycm9yIGZpbmRpbmcgdXNlciBieSBlbWFpbDonLCBlcnJvcilcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9LFxuXG4gIGFzeW5jIGNyZWF0ZUdvb2dsZVVzZXIodXNlckRhdGE6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgY3JlYXRlQ29ubmVjdGlvbigpXG4gICAgICBpZiAoIWNvbm5lY3Rpb24pIHJldHVybiBudWxsXG4gICAgICBcbiAgICAgIGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlKFxuICAgICAgICBgSU5TRVJUIElOVE8gdXNlcnMgKFxuICAgICAgICAgIGdvb2dsZV9pZCwgZW1haWwsIG5hbWUsIGdpdmVuX25hbWUsIGZhbWlseV9uYW1lLCBcbiAgICAgICAgICBwcm9maWxlX3BpY3R1cmVfdXJsLCBlbWFpbF92ZXJpZmllZCwgcHJpY2luZ190aWVyXG4gICAgICAgICkgVkFMVUVTICg/LCA/LCA/LCA/LCA/LCA/LCA/LCA/KWAsXG4gICAgICAgIFtcbiAgICAgICAgICB1c2VyRGF0YS5nb29nbGVfaWQsXG4gICAgICAgICAgdXNlckRhdGEuZW1haWwsXG4gICAgICAgICAgdXNlckRhdGEubmFtZSxcbiAgICAgICAgICB1c2VyRGF0YS5naXZlbl9uYW1lLFxuICAgICAgICAgIHVzZXJEYXRhLmZhbWlseV9uYW1lLFxuICAgICAgICAgIHVzZXJEYXRhLnByb2ZpbGVfcGljdHVyZV91cmwsXG4gICAgICAgICAgdHJ1ZSwgLy8gR29vZ2xlIGVtYWlscyBhcmUgdmVyaWZpZWRcbiAgICAgICAgICB1c2VyRGF0YS5wcmljaW5nX3RpZXIgfHwgJ2RldmVsb3BlcicgLy8gRGVmYXVsdCB0aWVyXG4gICAgICAgIF1cbiAgICAgIClcbiAgICAgIFxuICAgICAgLy8gR2V0IHRoZSBjcmVhdGVkIHVzZXJcbiAgICAgIGNvbnN0IFtyb3dzXSA9IGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZShcbiAgICAgICAgJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSA/JyxcbiAgICAgICAgWyhyZXN1bHQgYXMgYW55KS5pbnNlcnRJZF1cbiAgICAgIClcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uZW5kKClcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJvd3MpICYmIHJvd3MubGVuZ3RoID4gMCA/IHJvd3NbMF0gOiBudWxsXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05leHRBdXRoOiBFcnJvciBjcmVhdGluZyB1c2VyOicsIGVycm9yKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH0sXG5cbiAgYXN5bmMgdXBkYXRlVXNlckxhc3RMb2dpbih1c2VySWQ6IG51bWJlcikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgY3JlYXRlQ29ubmVjdGlvbigpXG4gICAgICBpZiAoIWNvbm5lY3Rpb24pIHJldHVyblxuICAgICAgXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGUoXG4gICAgICAgICdVUERBVEUgdXNlcnMgU0VUIGxhc3RfbG9naW4gPSBOT1coKSBXSEVSRSBpZCA9ID8nLFxuICAgICAgICBbdXNlcklkXVxuICAgICAgKVxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5lbmQoKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdOZXh0QXV0aDogRXJyb3IgdXBkYXRpbmcgbGFzdCBsb2dpbjonLCBlcnJvcilcbiAgICB9XG4gIH0sXG5cbiAgYXN5bmMgbGlua0dvb2dsZUFjY291bnQodXNlcklkOiBudW1iZXIsIGdvb2dsZUlkOiBzdHJpbmcsIHByb2ZpbGVQaWN0dXJlOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IGNyZWF0ZUNvbm5lY3Rpb24oKVxuICAgICAgaWYgKCFjb25uZWN0aW9uKSByZXR1cm4gbnVsbFxuICAgICAgXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGUoXG4gICAgICAgICdVUERBVEUgdXNlcnMgU0VUIGdvb2dsZV9pZCA9ID8sIHByb2ZpbGVfcGljdHVyZV91cmwgPSA/IFdIRVJFIGlkID0gPycsXG4gICAgICAgIFtnb29nbGVJZCwgcHJvZmlsZVBpY3R1cmUsIHVzZXJJZF1cbiAgICAgIClcbiAgICAgIFxuICAgICAgLy8gUmV0dXJuIHVwZGF0ZWQgdXNlclxuICAgICAgY29uc3QgW3Jvd3NdID0gYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlKFxuICAgICAgICAnU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9ID8nLFxuICAgICAgICBbdXNlcklkXVxuICAgICAgKVxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5lbmQoKVxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocm93cykgJiYgcm93cy5sZW5ndGggPiAwID8gcm93c1swXSA6IG51bGxcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTmV4dEF1dGg6IEVycm9yIGxpbmtpbmcgR29vZ2xlIGFjY291bnQ6JywgZXJyb3IpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBhdXRoT3B0aW9uczogTmV4dEF1dGhPcHRpb25zID0ge1xuICBwcm92aWRlcnM6IFtcbiAgICBHb29nbGVQcm92aWRlcih7XG4gICAgICBjbGllbnRJZDogcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9JRCEsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVUISxcbiAgICAgIC8vIFNpbXBsaWZpZWQgY29uZmlndXJhdGlvbiB0byBhdm9pZCB0aW1lb3V0IGlzc3Vlc1xuICAgICAgYXV0aG9yaXphdGlvbjoge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBwcm9tcHQ6ICdzZWxlY3RfYWNjb3VudCcsXG4gICAgICAgICAgYWNjZXNzX3R5cGU6ICdvZmZsaW5lJyxcbiAgICAgICAgICByZXNwb25zZV90eXBlOiAnY29kZScsXG4gICAgICAgICAgc2NvcGU6ICdvcGVuaWQgZW1haWwgcHJvZmlsZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIF0sXG4gIGNhbGxiYWNrczoge1xuICAgIGFzeW5jIHJlZGlyZWN0KHsgdXJsLCBiYXNlVXJsIH0pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdOZXh0QXV0aCByZWRpcmVjdCBjYWxsYmFjayAtIHVybDonLCB1cmwsICdiYXNlVXJsOicsIGJhc2VVcmwpXG4gICAgICBcbiAgICAgIC8vIEhhbmRsZSBhY2NvdW50IGRlYWN0aXZhdGVkIGNhc2VcbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ2FjY291bnRfZGVhY3RpdmF0ZWQnKSB8fCB1cmwuaW5jbHVkZXMoJ0FjY291bnRJbmFjdGl2ZScpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdBY2NvdW50IGRlYWN0aXZhdGVkIHJlZGlyZWN0IGRldGVjdGVkJylcbiAgICAgICAgcmV0dXJuIGAke2Jhc2VVcmx9L2F1dGgvYWNjb3VudC1kZWFjdGl2YXRlZGBcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gSGFuZGxlIHNpZ24gb3V0IHJlZGlyZWN0c1xuICAgICAgaWYgKHVybC5pbmNsdWRlcygnc2lnbm91dCcpIHx8IHVybC5pbmNsdWRlcygnL2FwaS9hdXRoL3NpZ25vdXQnKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnU2lnbiBvdXQgcmVkaXJlY3QgZGV0ZWN0ZWQsIGdvaW5nIHRvIGhvbWUgcGFnZScpXG4gICAgICAgIHJldHVybiBiYXNlVXJsXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEZvciBPQXV0aCBjYWxsYmFja3MsIHByaW9yaXRpemUgdGhlIHNwZWNpZmllZCBjYWxsYmFjayBVUkxcbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJy9hcGkvYXV0aC9jYWxsYmFjay9nb29nbGUnKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnR29vZ2xlIE9BdXRoIGNhbGxiYWNrIGRldGVjdGVkLCBmdWxsIFVSTDonLCB1cmwpXG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGFuIGVycm9yIGNhc2UgKGxpa2UgcmVnaXN0cmF0aW9uIGF0dGVtcHQgd2l0aCBleGlzdGluZyB1c2VyKVxuICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCdlcnJvcj0nKSkge1xuICAgICAgICAgIGNvbnN0IGVycm9yTWF0Y2ggPSB1cmwubWF0Y2goL2Vycm9yPShbXiZdKykvKVxuICAgICAgICAgIGlmIChlcnJvck1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvclR5cGUgPSBkZWNvZGVVUklDb21wb25lbnQoZXJyb3JNYXRjaFsxXSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPQXV0aCBlcnJvciBkZXRlY3RlZDonLCBlcnJvclR5cGUpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvciByZWdpc3RyYXRpb24gZXJyb3JzLCByZWRpcmVjdCB0byByZWdpc3RlciBwYWdlIHdpdGggZXJyb3IgaW5mb1xuICAgICAgICAgICAgaWYgKHVybC5pbmNsdWRlcygnYXV0b1JlZ2lzdGVyPScpIHx8IHVybC5pbmNsdWRlcygnc291cmNlPXByaWNpbmcnKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIGZsb3cgZXJyb3IsIHJlZGlyZWN0aW5nIHRvIHJlZ2lzdGVyIHBhZ2UnKVxuICAgICAgICAgICAgICBjb25zdCBwbGFuTWF0Y2ggPSB1cmwubWF0Y2goL1s/Jl0oPzphdXRvUmVnaXN0ZXJ8dGllcik9KFteJl0rKS8pXG4gICAgICAgICAgICAgIGNvbnN0IHBsYW4gPSBwbGFuTWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQocGxhbk1hdGNoWzFdKSA6ICdkZXZlbG9wZXInXG4gICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlVXJsfS9yZWdpc3Rlcj9wbGFuPSR7cGxhbn0mZXJyb3I9JHtlcnJvclR5cGV9YFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVHJ5IG11bHRpcGxlIHdheXMgdG8gZXh0cmFjdCB0aGUgY2FsbGJhY2sgVVJMXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrUGF0dGVybnMgPSBbXG4gICAgICAgICAgL1s/Jl1jYWxsYmFja1VybD0oW14mXSspLyxcbiAgICAgICAgICAvY2FsbGJhY2tVcmw9KFteJl0rKS8sXG4gICAgICAgICAgL3JlZGlyZWN0X3VyaT0oW14mXSspL1xuICAgICAgICBdXG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgY2FsbGJhY2tQYXR0ZXJucykge1xuICAgICAgICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHBhdHRlcm4pXG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja1VybCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGb3VuZCBjYWxsYmFjayBVUkwgd2l0aCBwYXR0ZXJuOicsIHBhdHRlcm4uc291cmNlLCAnLT4gJywgY2FsbGJhY2tVcmwpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChjYWxsYmFja1VybC5zdGFydHNXaXRoKGJhc2VVcmwpIHx8IGNhbGxiYWNrVXJsLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgICBjb25zdCBmdWxsQ2FsbGJhY2tVcmwgPSBjYWxsYmFja1VybC5zdGFydHNXaXRoKCcvJykgPyBgJHtiYXNlVXJsfSR7Y2FsbGJhY2tVcmx9YCA6IGNhbGxiYWNrVXJsXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWYWxpZCBjYWxsYmFjayBVUkwsIHJlZGlyZWN0aW5nIHRvOicsIGZ1bGxDYWxsYmFja1VybClcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bGxDYWxsYmFja1VybFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ05vIHZhbGlkIGNhbGxiYWNrIFVSTCBmb3VuZCwgcmVkaXJlY3RpbmcgdG8gbG9naW4nKVxuICAgICAgICByZXR1cm4gYCR7YmFzZVVybH0vbG9naW5gXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEhhbmRsZSBkaXJlY3QgVVJMc1xuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKGJhc2VVcmwpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdWYWxpZCBkaXJlY3QgVVJMOicsIHVybClcbiAgICAgICAgcmV0dXJuIHVybFxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBEZWZhdWx0IHRvIGxvZ2luIHBhZ2VcbiAgICAgIGNvbnNvbGUubG9nKCdEZWZhdWx0IHJlZGlyZWN0IHRvIGxvZ2luIHBhZ2UnKVxuICAgICAgcmV0dXJuIGAke2Jhc2VVcmx9L2xvZ2luYFxuICAgIH0sXG4gICAgYXN5bmMgc2lnbkluKHsgdXNlciwgYWNjb3VudCwgcHJvZmlsZSB9KSB7XG4gICAgICBjb25zb2xlLmxvZygnU2lnbkluIGNhbGxiYWNrIC0gQWNjb3VudCBwcm92aWRlcjonLCBhY2NvdW50Py5wcm92aWRlcilcbiAgICAgIGNvbnNvbGUubG9nKCdTaWduSW4gY2FsbGJhY2sgLSBVc2VyIGVtYWlsOicsIHVzZXI/LmVtYWlsKVxuICAgICAgXG4gICAgICBpZiAoYWNjb3VudD8ucHJvdmlkZXIgPT09ICdnb29nbGUnKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGFjY291bnQgaXMgYWN0aXZlIGJlZm9yZSBhbGxvd2luZyBzaWduLWluXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgZ29vZ2xlSWQgPSBhY2NvdW50LnByb3ZpZGVyQWNjb3VudElkXG4gICAgICAgICAgY29uc3QgZW1haWwgPSB1c2VyLmVtYWlsIVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXIgZXhpc3RzIGFuZCBpcyBhY3RpdmVcbiAgICAgICAgICBsZXQgZGJVc2VyID0gYXdhaXQgZGJPcGVyYXRpb25zLmZpbmRVc2VyQnlHb29nbGVJZChnb29nbGVJZClcbiAgICAgICAgICBpZiAoIWRiVXNlcikge1xuICAgICAgICAgICAgLy8gQ2hlY2sgYnkgZW1haWwgaWYgbm90IGZvdW5kIGJ5IEdvb2dsZSBJRFxuICAgICAgICAgICAgZGJVc2VyID0gYXdhaXQgZGJPcGVyYXRpb25zLmZpbmRVc2VyQnlFbWFpbChlbWFpbClcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGRiVXNlciAmJiAhZGJVc2VyLmlzX2FjdGl2ZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ+KdjCBTaWduSW4gY2FsbGJhY2s6IEFjY291bnQgaXMgaW5hY3RpdmUsIGJsb2NraW5nIHNpZ24taW4nKVxuICAgICAgICAgICAgLy8gUmV0dXJuIGZhbHNlIHRvIGJsb2NrIHNpZ24taW4gYW5kIHRyaWdnZXIgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmxvZygn4pyTIEdvb2dsZSBzaWduLWluIGFsbG93ZWQgLSBhY2NvdW50IGlzIGFjdGl2ZSBvciBuZXcgdXNlcicpXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdTaWduSW4gY2FsbGJhY2sgZXJyb3I6JywgZXJyb3IpXG4gICAgICAgICAgLy8gQWxsb3cgc2lnbi1pbiBvbiBkYXRhYmFzZSBlcnJvcnMgdG8gYXZvaWQgYmxvY2tpbmcgbGVnaXRpbWF0ZSB1c2Vyc1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ+KdjCBOb24tR29vZ2xlIHByb3ZpZGVyIHJlamVjdGVkOicsIGFjY291bnQ/LnByb3ZpZGVyKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSxcblxuICAgIGFzeW5jIGp3dCh7IHRva2VuLCBhY2NvdW50LCB1c2VyLCB0cmlnZ2VyIH0pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEhhbmRsZSBzZXNzaW9uIHJlZnJlc2ggdHJpZ2dlcnMgKGxpa2UgYWZ0ZXIgdGllciB1cGdyYWRlcylcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICd1cGRhdGUnICYmIHRva2VuLnVzZXJJZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdKV1QgY2FsbGJhY2sgLSB0cmlnZ2VyIHVwZGF0ZSBkZXRlY3RlZCwgcmVmcmVzaGluZyB1c2VyIGRhdGEgZm9yIElEOicsIHRva2VuLnVzZXJJZClcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gR2V0IHVzZXIgYnkgSUQgc2luY2Ugd2UgaGF2ZSB0aGUgdXNlcklkIGluIHRva2VuXG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgY3JlYXRlQ29ubmVjdGlvbigpXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICBjb25zdCBbcm93c10gPSBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGUoXG4gICAgICAgICAgICAgICAgJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSA/JyxcbiAgICAgICAgICAgICAgICBbdG9rZW4udXNlcklkXVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uZW5kKClcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvd3MpICYmIHJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRiVXNlciA9IHJvd3NbMF0gYXMgYW55XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0pXVCByZWZyZXNoIC0gVXBkYXRlZCB0aWVyIGZyb20gREI6JywgZGJVc2VyLnByaWNpbmdfdGllcilcbiAgICAgICAgICAgICAgICB0b2tlbi5wcmljaW5nVGllciA9IGRiVXNlci5wcmljaW5nX3RpZXJcbiAgICAgICAgICAgICAgICB0b2tlbi5lbWFpbFZlcmlmaWVkID0gZGJVc2VyLmVtYWlsX3ZlcmlmaWVkXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0pXVCByZWZyZXNoIC0gVG9rZW4gdXBkYXRlZCB3aXRoIG5ldyB0aWVyOicsIHRva2VuLnByaWNpbmdUaWVyKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAocmVmcmVzaEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSldUIHJlZnJlc2ggZXJyb3I6JywgcmVmcmVzaEVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGFjY291bnQgJiYgdXNlcikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdKV1QgY2FsbGJhY2sgLSBwcm9jZXNzaW5nIG5ldyBzaWduLWluIGZvcjonLCB1c2VyLmVtYWlsKVxuICAgICAgICAgIGNvbnNvbGUubG9nKCdBY2NvdW50IGRldGFpbHM6Jywge1xuICAgICAgICAgICAgcHJvdmlkZXI6IGFjY291bnQucHJvdmlkZXIsXG4gICAgICAgICAgICB0eXBlOiBhY2NvdW50LnR5cGUsXG4gICAgICAgICAgfSlcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBGaXJzdCB0aW1lIHVzZXIgc2lnbnMgaW5cbiAgICAgICAgICBjb25zdCBnb29nbGVJZCA9IGFjY291bnQucHJvdmlkZXJBY2NvdW50SWRcbiAgICAgICAgICBjb25zdCBlbWFpbCA9IHVzZXIuZW1haWwhXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBleGlzdHMgYnkgR29vZ2xlIElEXG4gICAgICAgICAgbGV0IGRiVXNlciA9IGF3YWl0IGRiT3BlcmF0aW9ucy5maW5kVXNlckJ5R29vZ2xlSWQoZ29vZ2xlSWQpXG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGRiVXNlcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgZm91bmQgaW4gZGF0YWJhc2Ugd2l0aCB0aWVyOicsIGRiVXNlci5wcmljaW5nX3RpZXIpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGFjY291bnQgaXMgYWN0aXZlXG4gICAgICAgICAgICBpZiAoIWRiVXNlci5pc19hY3RpdmUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+KdjCBBY2NvdW50IGlzIGluYWN0aXZlLCByZWplY3Rpbmcgc2lnbi1pbiBmb3I6JywgdXNlci5lbWFpbClcbiAgICAgICAgICAgICAgLy8gU2V0IGEgZmxhZyB0byBpbmRpY2F0ZSBhY2NvdW50IGlzIGluYWN0aXZlXG4gICAgICAgICAgICAgIHRva2VuLmFjY291bnRJbmFjdGl2ZSA9IHRydWVcbiAgICAgICAgICAgICAgdG9rZW4uZXJyb3IgPSAnQWNjb3VudEluYWN0aXZlJ1xuICAgICAgICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXNlciBleGlzdHMgYW5kIGlzIGFjdGl2ZSwgdXBkYXRlIGxhc3QgbG9naW4gYW5kIGdvIHN0cmFpZ2h0IHRvIGRhc2hib2FyZFxuICAgICAgICAgICAgYXdhaXQgZGJPcGVyYXRpb25zLnVwZGF0ZVVzZXJMYXN0TG9naW4oZGJVc2VyLmlkKVxuICAgICAgICAgICAgdG9rZW4udXNlcklkID0gZGJVc2VyLmlkXG4gICAgICAgICAgICB0b2tlbi5wcmljaW5nVGllciA9IGRiVXNlci5wcmljaW5nX3RpZXIgLy8gKipGSVggMjogQWx3YXlzIHVzZSBEQiB0aWVyIGFzIHNvdXJjZSBvZiB0cnV0aCoqXG4gICAgICAgICAgICB0b2tlbi5lbWFpbFZlcmlmaWVkID0gZGJVc2VyLmVtYWlsX3ZlcmlmaWVkXG4gICAgICAgICAgICB0b2tlbi5uZWVkc1JlZ2lzdHJhdGlvbiA9IGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIHRva2VuIHdpdGggY29ycmVjdCB0aWVyIGZyb20gREI6JywgZGJVc2VyLnByaWNpbmdfdGllcilcbiAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSBsYXRlc3QgcHJvZmlsZSBpbWFnZVxuICAgICAgICAgICAgaWYgKHVzZXIuaW1hZ2UgJiYgdXNlci5pbWFnZSAhPT0gZGJVc2VyLnByb2ZpbGVfcGljdHVyZV91cmwpIHtcbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHByb2ZpbGUgcGljdHVyZSBpbiBkYXRhYmFzZSBpZiBpdCdzIGNoYW5nZWRcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgY3JlYXRlQ29ubmVjdGlvbigpXG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZShcbiAgICAgICAgICAgICAgICAgICAgJ1VQREFURSB1c2VycyBTRVQgcHJvZmlsZV9waWN0dXJlX3VybCA9ID8gV0hFUkUgaWQgPSA/JyxcbiAgICAgICAgICAgICAgICAgICAgW3VzZXIuaW1hZ2UsIGRiVXNlci5pZF1cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uZW5kKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgcHJvZmlsZSBwaWN0dXJlOicsIGVycm9yKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIG5vdCBmb3VuZCBpbiBkYXRhYmFzZSwgY2hlY2tpbmcgZmxvdyB0eXBlLi4uJylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBleGlzdHMgYnkgZW1haWwgKG1pZ2h0IGhhdmUgcmVnaXN0ZXJlZCBiZWZvcmUgYnV0IG5ldmVyIGxpbmtlZCBHb29nbGUpXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBkYk9wZXJhdGlvbnMuZmluZFVzZXJCeUVtYWlsKGVtYWlsKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGZvdW5kIGJ5IGVtYWlsLCBjaGVja2luZyBpZiBhY2NvdW50IGlzIGFjdGl2ZS4uLicpXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhY2NvdW50IGlzIGFjdGl2ZVxuICAgICAgICAgICAgICBpZiAoIWV4aXN0aW5nVXNlci5pc19hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn4p2MIEFjY291bnQgaXMgaW5hY3RpdmUsIHJlamVjdGluZyBzaWduLWluIGZvcjonLCB1c2VyLmVtYWlsKVxuICAgICAgICAgICAgICAgIHRva2VuLmFjY291bnRJbmFjdGl2ZSA9IHRydWVcbiAgICAgICAgICAgICAgICB0b2tlbi5lcnJvciA9ICdBY2NvdW50SW5hY3RpdmUnXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGZvdW5kIGJ5IGVtYWlsLCBsaW5raW5nIEdvb2dsZSBhY2NvdW50IHdpdGggdGllcjonLCBleGlzdGluZ1VzZXIucHJpY2luZ190aWVyKVxuICAgICAgICAgICAgICAvLyBMaW5rIEdvb2dsZSBhY2NvdW50IHRvIGV4aXN0aW5nIHVzZXJcbiAgICAgICAgICAgICAgZGJVc2VyID0gYXdhaXQgZGJPcGVyYXRpb25zLmxpbmtHb29nbGVBY2NvdW50KFxuICAgICAgICAgICAgICAgIGV4aXN0aW5nVXNlci5pZCwgXG4gICAgICAgICAgICAgICAgZ29vZ2xlSWQsIFxuICAgICAgICAgICAgICAgIHVzZXIuaW1hZ2UgfHwgJydcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpZiAoZGJVc2VyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZGJPcGVyYXRpb25zLnVwZGF0ZVVzZXJMYXN0TG9naW4oZGJVc2VyLmlkKVxuICAgICAgICAgICAgICAgIHRva2VuLnVzZXJJZCA9IGRiVXNlci5pZFxuICAgICAgICAgICAgICAgIHRva2VuLnByaWNpbmdUaWVyID0gZGJVc2VyLnByaWNpbmdfdGllciAvLyAqKkZJWCAyOiBVc2UgY29ycmVjdCB0aWVyIGZyb20gbGlua2VkIGFjY291bnQqKlxuICAgICAgICAgICAgICAgIHRva2VuLmVtYWlsVmVyaWZpZWQgPSBkYlVzZXIuZW1haWxfdmVyaWZpZWRcbiAgICAgICAgICAgICAgICB0b2tlbi5uZWVkc1JlZ2lzdHJhdGlvbiA9IGZhbHNlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xpbmtlZCBhY2NvdW50IHdpdGggdGllcjonLCBkYlVzZXIucHJpY2luZ190aWVyKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBVc2VyIGRvZXNuJ3QgZXhpc3QgLSBjaGVjayBpZiB0aGlzIGlzIEZsb3cgMiBhbmQgYXV0by1jcmVhdGUgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05ldyB1c2VyIGRldGVjdGVkLCBjaGVja2luZyBmb3IgYXV0by1yZWdpc3RyYXRpb24uLi4nKVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBwZW5kaW5nIHJlZ2lzdHJhdGlvbiBkYXRhIChGbG93IDIpXG4gICAgICAgICAgICAgIC8vIFdlJ2xsIGRldGVjdCB0aGlzIGJ5IGNoZWNraW5nIGlmIHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0IGFuZCBoYXZlIHNlc3Npb25TdG9yYWdlXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlbmRpbmdSZWdpc3RyYXRpb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdwZW5kaW5nUmVnaXN0cmF0aW9uJylcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1JlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0cmF0aW9uRGF0YSA9IEpTT04ucGFyc2UocGVuZGluZ1JlZ2lzdHJhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Zsb3cgMiBkZXRlY3RlZCBpbiBKV1Q6IEF1dG8tY3JlYXRpbmcgdXNlciB3aXRoIHBsYW46JywgcmVnaXN0cmF0aW9uRGF0YS5wbGFuKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIHBlbmRpbmcgcmVnaXN0cmF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ3BlbmRpbmdSZWdpc3RyYXRpb24nKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHVzZXIgaW1tZWRpYXRlbHkgZHVyaW5nIE9BdXRoXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB1c2VyLm5hbWUgfHwgJydcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW2ZpcnN0TmFtZSwgLi4ubGFzdE5hbWVQYXJ0c10gPSBuYW1lLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE5hbWUgPSBsYXN0TmFtZVBhcnRzLmpvaW4oJyAnKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdVc2VyID0gYXdhaXQgZGJPcGVyYXRpb25zLmNyZWF0ZUdvb2dsZVVzZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlX2lkOiBnb29nbGVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlbl9uYW1lOiBmaXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHlfbmFtZTogbGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlX3BpY3R1cmVfdXJsOiB1c2VyLmltYWdlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2luZ190aWVyOiByZWdpc3RyYXRpb25EYXRhLnBsYW5cbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdVc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRmxvdyAyOiBOZXcgdXNlciBjcmVhdGVkIGR1cmluZyBPQXV0aCB3aXRoIHRpZXI6JywgbmV3VXNlci5wcmljaW5nX3RpZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi51c2VySWQgPSBuZXdVc2VyLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5wcmljaW5nVGllciA9IG5ld1VzZXIucHJpY2luZ190aWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5lbWFpbFZlcmlmaWVkID0gbmV3VXNlci5lbWFpbF92ZXJpZmllZFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4ubmVlZHNSZWdpc3RyYXRpb24gPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4uaXNOZXdVc2VyID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU2V0dGluZyB0b2tlbiBwcmljaW5nIHRpZXIgdG86JywgbmV3VXNlci5wcmljaW5nX3RpZXIpXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGbG93IDI6IEZhaWxlZCB0byBjcmVhdGUgdXNlciBkdXJpbmcgT0F1dGgsIG1hcmtpbmcgYXMgbmVlZHMgcmVnaXN0cmF0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLm5lZWRzUmVnaXN0cmF0aW9uID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4uZ29vZ2xlSWQgPSBnb29nbGVJZFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4udXNlckVtYWlsID0gdXNlci5lbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4udXNlck5hbWUgPSB1c2VyLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJJbWFnZSA9IHVzZXIuaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnByaWNpbmdUaWVyID0gcmVnaXN0cmF0aW9uRGF0YS5wbGFuXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChjcmVhdGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGbG93IDI6IFVzZXIgY3JlYXRpb24gZmFpbGVkLCBjaGVja2luZyBpZiB1c2VyIGFscmVhZHkgZXhpc3RzOicsIGNyZWF0ZUVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdXNlciBjcmVhdGlvbiBmYWlscyBkdWUgdG8gZXhpc3RpbmcgdXNlciwgdHJ5IHRvIGZpbmQgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IGRiT3BlcmF0aW9ucy5maW5kVXNlckJ5RW1haWwoZW1haWwpXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVXNlciAmJiBleGlzdGluZ1VzZXIuaXNfYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRm91bmQgZXhpc3RpbmcgYWN0aXZlIHVzZXIgZHVyaW5nIHJlZ2lzdHJhdGlvbiBhdHRlbXB0LCBzZXR0aW5nIHVwIG5vcm1hbCBzZXNzaW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJJZCA9IGV4aXN0aW5nVXNlci5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4ucHJpY2luZ1RpZXIgPSBleGlzdGluZ1VzZXIucHJpY2luZ190aWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5lbWFpbFZlcmlmaWVkID0gZXhpc3RpbmdVc2VyLmVtYWlsX3ZlcmlmaWVkXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5uZWVkc1JlZ2lzdHJhdGlvbiA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBkYk9wZXJhdGlvbnMudXBkYXRlVXNlckxhc3RMb2dpbihleGlzdGluZ1VzZXIuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBHb29nbGUgSUQgaWYgaXQgd2Fzbid0IGxpbmtlZCBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdVc2VyLmdvb2dsZV9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBkYk9wZXJhdGlvbnMubGlua0dvb2dsZUFjY291bnQoZXhpc3RpbmdVc2VyLmlkLCBnb29nbGVJZCwgdXNlci5pbWFnZSB8fCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xpbmtlZCBHb29nbGUgYWNjb3VudCB0byBleGlzdGluZyB1c2VyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0V4aXN0aW5nIHVzZXIgbm90IGZvdW5kIG9yIGluYWN0aXZlLCBtYXJraW5nIGFzIG5lZWRzIHJlZ2lzdHJhdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5uZWVkc1JlZ2lzdHJhdGlvbiA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLmdvb2dsZUlkID0gZ29vZ2xlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJFbWFpbCA9IHVzZXIuZW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJOYW1lID0gdXNlci5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi51c2VySW1hZ2UgPSB1c2VyLmltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5wcmljaW5nVGllciA9IHJlZ2lzdHJhdGlvbkRhdGEucGxhblxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmxvdyAyOiBFcnJvciBkdXJpbmcgYXV0by1yZWdpc3RyYXRpb246JywgZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLm5lZWRzUmVnaXN0cmF0aW9uID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5nb29nbGVJZCA9IGdvb2dsZUlkXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJFbWFpbCA9IHVzZXIuZW1haWxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4udXNlck5hbWUgPSB1c2VyLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4udXNlckltYWdlID0gdXNlci5pbWFnZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBGbG93IDE6IE1hcmsgYXMgbmVlZGluZyByZWdpc3RyYXRpb24gKHdpbGwgc2hvdyBvcHRpb25zIG9uIGxvZ2luIHBhZ2UpXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRmxvdyAxOiBVc2VyIG1hcmtlZCBhcyBuZWVkaW5nIHJlZ2lzdHJhdGlvbicpXG4gICAgICAgICAgICAgICAgICB0b2tlbi5uZWVkc1JlZ2lzdHJhdGlvbiA9IHRydWVcbiAgICAgICAgICAgICAgICAgIHRva2VuLmdvb2dsZUlkID0gZ29vZ2xlSWRcbiAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJFbWFpbCA9IHVzZXIuZW1haWxcbiAgICAgICAgICAgICAgICAgIHRva2VuLnVzZXJOYW1lID0gdXNlci5uYW1lXG4gICAgICAgICAgICAgICAgICB0b2tlbi51c2VySW1hZ2UgPSB1c2VyLmltYWdlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNlcnZlci1zaWRlIG9yIG5vIHNlc3Npb25TdG9yYWdlIC0gbWFyayBhcyBuZWVkaW5nIHJlZ2lzdHJhdGlvblxuICAgICAgICAgICAgICAgIHRva2VuLm5lZWRzUmVnaXN0cmF0aW9uID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRva2VuLmdvb2dsZUlkID0gZ29vZ2xlSWRcbiAgICAgICAgICAgICAgICB0b2tlbi51c2VyRW1haWwgPSB1c2VyLmVtYWlsXG4gICAgICAgICAgICAgICAgdG9rZW4udXNlck5hbWUgPSB1c2VyLm5hbWVcbiAgICAgICAgICAgICAgICB0b2tlbi51c2VySW1hZ2UgPSB1c2VyLmltYWdlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4ubmVlZHNSZWdpc3RyYXRpb24gJiYgdG9rZW4udXNlckVtYWlsKSB7XG4gICAgICAgICAgLy8gRm9yIGV4aXN0aW5nIHRva2VucywgcGVyaW9kaWNhbGx5IGNoZWNrIGlmIHJlZ2lzdHJhdGlvbiB3YXMgY29tcGxldGVkXG4gICAgICAgICAgY29uc29sZS5sb2coJ0pXVCBjYWxsYmFjayAtIGNoZWNraW5nIGlmIHJlZ2lzdHJhdGlvbiBjb21wbGV0ZWQgZm9yOicsIHRva2VuLnVzZXJFbWFpbClcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGJVc2VyID0gYXdhaXQgZGJPcGVyYXRpb25zLmZpbmRVc2VyQnlFbWFpbCh0b2tlbi51c2VyRW1haWwgYXMgc3RyaW5nKVxuICAgICAgICAgICAgaWYgKGRiVXNlcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIGNvbXBsZXRlZCEgVXBkYXRpbmcgdG9rZW4gd2l0aCB0aWVyOicsIGRiVXNlci5wcmljaW5nX3RpZXIpXG4gICAgICAgICAgICAgIC8vIFVzZXIgaGFzIGNvbXBsZXRlZCByZWdpc3RyYXRpb24sIHVwZGF0ZSB0b2tlblxuICAgICAgICAgICAgICB0b2tlbi51c2VySWQgPSBkYlVzZXIuaWRcbiAgICAgICAgICAgICAgdG9rZW4ucHJpY2luZ1RpZXIgPSBkYlVzZXIucHJpY2luZ190aWVyIC8vICoqRklYIDI6IEFsd2F5cyBzeW5jIHRpZXIgZnJvbSBkYXRhYmFzZSoqXG4gICAgICAgICAgICAgIHRva2VuLmVtYWlsVmVyaWZpZWQgPSBkYlVzZXIuZW1haWxfdmVyaWZpZWRcbiAgICAgICAgICAgICAgdG9rZW4ubmVlZHNSZWdpc3RyYXRpb24gPSBmYWxzZVxuICAgICAgICAgICAgICAvLyBDbGVhciB0ZW1wb3JhcnkgcmVnaXN0cmF0aW9uIGRhdGFcbiAgICAgICAgICAgICAgZGVsZXRlIHRva2VuLmdvb2dsZUlkXG4gICAgICAgICAgICAgIGRlbGV0ZSB0b2tlbi51c2VyRW1haWxcbiAgICAgICAgICAgICAgZGVsZXRlIHRva2VuLnVzZXJOYW1lXG4gICAgICAgICAgICAgIGRlbGV0ZSB0b2tlbi51c2VySW1hZ2VcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUb2tlbiB1cGRhdGVkIHdpdGggY29ycmVjdCB0aWVyOicsIGRiVXNlci5wcmljaW5nX3RpZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoY2hlY2tFcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGNoZWNraW5nIHJlZ2lzdHJhdGlvbiBzdGF0dXM6JywgY2hlY2tFcnJvcilcbiAgICAgICAgICAgIC8vIERvbid0IHVwZGF0ZSB0b2tlbiBpZiBjaGVjayBmYWlsc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0pXVCBjYWxsYmFjayBlcnJvcjonLCBlcnJvcilcbiAgICAgICAgLy8gRm9yIG5ldyB1c2VycyBvciBkYXRhYmFzZSBjb25uZWN0aW9uIGVycm9ycywgbWFyayB0aGVtIGFzIG5lZWRpbmcgcmVnaXN0cmF0aW9uXG4gICAgICAgIGlmIChhY2NvdW50ICYmIHVzZXIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgZXJyb3IsIG1hcmtpbmcgdXNlciBhcyBuZWVkaW5nIHJlZ2lzdHJhdGlvbicpXG4gICAgICAgICAgdG9rZW4ubmVlZHNSZWdpc3RyYXRpb24gPSB0cnVlXG4gICAgICAgICAgdG9rZW4uZ29vZ2xlSWQgPSBhY2NvdW50LnByb3ZpZGVyQWNjb3VudElkXG4gICAgICAgICAgdG9rZW4udXNlckVtYWlsID0gdXNlci5lbWFpbFxuICAgICAgICAgIHRva2VuLnVzZXJOYW1lID0gdXNlci5uYW1lXG4gICAgICAgICAgdG9rZW4udXNlckltYWdlID0gdXNlci5pbWFnZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlblxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhc3luYyBzZXNzaW9uKHsgc2Vzc2lvbiwgdG9rZW4gfSkge1xuICAgICAgLy8gQ2hlY2sgaWYgYWNjb3VudCBpcyBpbmFjdGl2ZVxuICAgICAgaWYgKHRva2VuLmFjY291bnRJbmFjdGl2ZSB8fCB0b2tlbi5lcnJvciA9PT0gJ0FjY291bnRJbmFjdGl2ZScpIHtcbiAgICAgICAgLy8gUmV0dXJuIG51bGwgc2Vzc2lvbiB0byBmb3JjZSBzaWduIG91dCBhbmQgcmVkaXJlY3RcbiAgICAgICAgY29uc29sZS5sb2coJ1Nlc3Npb24gY2FsbGJhY2s6IEFjY291bnQgaW5hY3RpdmUsIHJlZGlyZWN0aW5nIHRvIGRlYWN0aXZhdGVkIHBhZ2UnKVxuICAgICAgICAvLyBXZSdsbCBoYW5kbGUgdGhlIHJlZGlyZWN0IGluIHRoZSBmcm9udGVuZCB3aGVuIHNlc3Npb24gYmVjb21lcyBudWxsXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE9ubHkgc2VuZCBmdWxsIHNlc3Npb24gZGF0YSBpZiB1c2VyIGlzIGNvbXBsZXRlbHkgcmVnaXN0ZXJlZFxuICAgICAgaWYgKHRva2VuLnVzZXJJZCAmJiAhdG9rZW4ubmVlZHNSZWdpc3RyYXRpb24pIHtcbiAgICAgICAgLy8gVXNlciBoYXMgY29tcGxldGVkIHJlZ2lzdHJhdGlvblxuICAgICAgICBzZXNzaW9uLnVzZXIuaWQgPSB0b2tlbi51c2VySWQgYXMgbnVtYmVyXG4gICAgICAgIHNlc3Npb24udXNlci5wcmljaW5nVGllciA9IHRva2VuLnByaWNpbmdUaWVyIGFzIHN0cmluZ1xuICAgICAgICBzZXNzaW9uLnVzZXIuZW1haWxWZXJpZmllZCA9IHRva2VuLmVtYWlsVmVyaWZpZWQgYXMgYm9vbGVhblxuICAgICAgICBzZXNzaW9uLnVzZXIubmVlZHNSZWdpc3RyYXRpb24gPSBmYWxzZVxuICAgICAgICAvLyBJbmNsdWRlIG5ldyB1c2VyIGZsYWcgZm9yIHdlbGNvbWUgZmxvd3NcbiAgICAgICAgaWYgKHRva2VuLmlzTmV3VXNlcikge1xuICAgICAgICAgIHNlc3Npb24udXNlci5pc05ld1VzZXIgPSB0cnVlXG4gICAgICAgICAgLy8gQ2xlYXIgdGhlIGZsYWcgYWZ0ZXIgZmlyc3Qgc2Vzc2lvbiB0byBhdm9pZCBzaG93aW5nIHdlbGNvbWUgcmVwZWF0ZWRseVxuICAgICAgICAgIGRlbGV0ZSB0b2tlbi5pc05ld1VzZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0b2tlbi5uZWVkc1JlZ2lzdHJhdGlvbikge1xuICAgICAgICAvLyBVc2VyIG5lZWRzIHJlZ2lzdHJhdGlvbiAtIHByb3ZpZGUgbWluaW1hbCBzZXNzaW9uIGRhdGFcbiAgICAgICAgc2Vzc2lvbi51c2VyLm5lZWRzUmVnaXN0cmF0aW9uID0gdHJ1ZVxuICAgICAgICBzZXNzaW9uLnVzZXIuZ29vZ2xlSWQgPSB0b2tlbi5nb29nbGVJZCBhcyBzdHJpbmdcbiAgICAgICAgc2Vzc2lvbi51c2VyLmVtYWlsID0gdG9rZW4udXNlckVtYWlsIGFzIHN0cmluZ1xuICAgICAgICBzZXNzaW9uLnVzZXIubmFtZSA9IHRva2VuLnVzZXJOYW1lIGFzIHN0cmluZ1xuICAgICAgICBzZXNzaW9uLnVzZXIuaW1hZ2UgPSB0b2tlbi51c2VySW1hZ2UgYXMgc3RyaW5nXG4gICAgICAgIC8vIERvbid0IHByb3ZpZGUgdXNlci5pZCAtIHRoaXMgcHJldmVudHMgZGFzaGJvYXJkIGFjY2Vzc1xuICAgICAgICBkZWxldGUgc2Vzc2lvbi51c2VyLmlkXG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvblxuICAgIH0sXG4gICAgXG4gICAgYXN5bmMgc2lnbk91dCh7IHRva2VuLCBzZXNzaW9uIH0pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdOZXh0QXV0aCBzaWduT3V0IGNhbGxiYWNrIC0gY2xlYXJpbmcgc2Vzc2lvbiBkYXRhJylcbiAgICAgIC8vIEVuc3VyZSBhbGwgdXNlciBkYXRhIGlzIGNsZWFyZWQgZnJvbSB0aGUgdG9rZW5cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9LFxuICBwYWdlczoge1xuICAgIHNpZ25JbjogJy9sb2dpbicsXG4gICAgc2lnbk91dDogJy8nLFxuICAgIGVycm9yOiAnL2F1dGgvZXJyb3InLFxuICB9LFxuICBzZXNzaW9uOiB7XG4gICAgc3RyYXRlZ3k6ICdqd3QnLFxuICAgIG1heEFnZTogMzAgKiAyNCAqIDYwICogNjAsIC8vIDMwIGRheXNcbiAgICB1cGRhdGVBZ2U6IDI0ICogNjAgKiA2MCwgLy8gMjQgaG91cnNcbiAgfSxcbiAgY29va2llczoge1xuICAgIHNlc3Npb25Ub2tlbjoge1xuICAgICAgbmFtZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/ICdfX1NlY3VyZS1uZXh0LWF1dGguc2Vzc2lvbi10b2tlbicgOiAnbmV4dC1hdXRoLnNlc3Npb24tdG9rZW4nLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBodHRwT25seTogdHJ1ZSxcbiAgICAgICAgc2FtZVNpdGU6ICdsYXgnLFxuICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn1cblxuY29uc3QgaGFuZGxlciA9IE5leHRBdXRoKGF1dGhPcHRpb25zKVxuXG4vLyBFeHBvcnQgYXV0aE9wdGlvbnMgZm9yIHVzZSBpbiBvdGhlciBBUEkgcm91dGVzXG5leHBvcnQgeyBoYW5kbGVyIGFzIEdFVCwgaGFuZGxlciBhcyBQT1NULCBhdXRoT3B0aW9ucyB9XG4iXSwibmFtZXMiOlsiTmV4dEF1dGgiLCJHb29nbGVQcm92aWRlciIsIm15c3FsIiwiY3JlYXRlQ29ubmVjdGlvbiIsImNvbm5lY3Rpb25Db25maWciLCJob3N0IiwicHJvY2VzcyIsImVudiIsIkRCX0hPU1QiLCJ1c2VyIiwiREJfVVNFUiIsInBhc3N3b3JkIiwiREJfUEFTU1dPUkQiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwb3J0IiwicGFyc2VJbnQiLCJEQl9QT1JUIiwiY29ubmVjdFRpbWVvdXQiLCJhY3F1aXJlVGltZW91dCIsInRpbWVvdXQiLCJyZWNvbm5lY3QiLCJpZGxlVGltZW91dCIsImNvbnNvbGUiLCJsb2ciLCJjb25uZWN0aW9uIiwiZXJyb3IiLCJkYk9wZXJhdGlvbnMiLCJmaW5kVXNlckJ5R29vZ2xlSWQiLCJnb29nbGVJZCIsInJvd3MiLCJleGVjdXRlIiwiZW5kIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZmluZFVzZXJCeUVtYWlsIiwiZW1haWwiLCJjcmVhdGVHb29nbGVVc2VyIiwidXNlckRhdGEiLCJyZXN1bHQiLCJnb29nbGVfaWQiLCJuYW1lIiwiZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIiwicHJvZmlsZV9waWN0dXJlX3VybCIsInByaWNpbmdfdGllciIsImluc2VydElkIiwidXBkYXRlVXNlckxhc3RMb2dpbiIsInVzZXJJZCIsImxpbmtHb29nbGVBY2NvdW50IiwicHJvZmlsZVBpY3R1cmUiLCJhdXRoT3B0aW9ucyIsInByb3ZpZGVycyIsImNsaWVudElkIiwiR09PR0xFX0NMSUVOVF9JRCIsImNsaWVudFNlY3JldCIsIkdPT0dMRV9DTElFTlRfU0VDUkVUIiwiYXV0aG9yaXphdGlvbiIsInBhcmFtcyIsInByb21wdCIsImFjY2Vzc190eXBlIiwicmVzcG9uc2VfdHlwZSIsInNjb3BlIiwiY2FsbGJhY2tzIiwicmVkaXJlY3QiLCJ1cmwiLCJiYXNlVXJsIiwiaW5jbHVkZXMiLCJlcnJvck1hdGNoIiwibWF0Y2giLCJlcnJvclR5cGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwbGFuTWF0Y2giLCJwbGFuIiwiY2FsbGJhY2tQYXR0ZXJucyIsInBhdHRlcm4iLCJjYWxsYmFja1VybCIsInNvdXJjZSIsInN0YXJ0c1dpdGgiLCJmdWxsQ2FsbGJhY2tVcmwiLCJzaWduSW4iLCJhY2NvdW50IiwicHJvZmlsZSIsInByb3ZpZGVyIiwicHJvdmlkZXJBY2NvdW50SWQiLCJkYlVzZXIiLCJpc19hY3RpdmUiLCJqd3QiLCJ0b2tlbiIsInRyaWdnZXIiLCJwcmljaW5nVGllciIsImVtYWlsVmVyaWZpZWQiLCJlbWFpbF92ZXJpZmllZCIsInJlZnJlc2hFcnJvciIsInR5cGUiLCJhY2NvdW50SW5hY3RpdmUiLCJpZCIsIm5lZWRzUmVnaXN0cmF0aW9uIiwiaW1hZ2UiLCJleGlzdGluZ1VzZXIiLCJwZW5kaW5nUmVnaXN0cmF0aW9uIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwicmVnaXN0cmF0aW9uRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlbW92ZUl0ZW0iLCJmaXJzdE5hbWUiLCJsYXN0TmFtZVBhcnRzIiwic3BsaXQiLCJsYXN0TmFtZSIsImpvaW4iLCJuZXdVc2VyIiwiaXNOZXdVc2VyIiwidXNlckVtYWlsIiwidXNlck5hbWUiLCJ1c2VySW1hZ2UiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2UiLCJjaGVja0Vycm9yIiwic2Vzc2lvbiIsInNpZ25PdXQiLCJwYWdlcyIsInN0cmF0ZWd5IiwibWF4QWdlIiwidXBkYXRlQWdlIiwiY29va2llcyIsInNlc3Npb25Ub2tlbiIsIm9wdGlvbnMiLCJodHRwT25seSIsInNhbWVTaXRlIiwicGF0aCIsInNlY3VyZSIsImhhbmRsZXIiLCJHRVQiLCJQT1NUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/[...nextauth]/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@babel","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/uuid","vendor-chunks/oauth","vendor-chunks/@panva","vendor-chunks/yallist","vendor-chunks/preact-render-to-string","vendor-chunks/preact","vendor-chunks/oidc-token-hash","vendor-chunks/object-hash","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.ts&appDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Ceraste%5CProducts%5Ce-one-elastic-doctor%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();